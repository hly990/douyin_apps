/**
 *  This file may have been modified by Beijing Douyin Information Service Co., Ltd.
 */
import Aggregation from './aggregate';
import { LogicCommand } from './commands/logic-command';
import { QueryCommand } from './commands/query-command';
import { UpdateCommand } from './commands/update-command';
export declare type IQueryCondition = Record<string, any> | LogicCommand;
export declare const DbCommand: {
    eq: (val: any) => QueryCommand;
    neq: (val: any) => QueryCommand;
    lt: (val: any) => QueryCommand;
    lte: (val: any) => QueryCommand;
    gt: (val: any) => QueryCommand;
    gte: (val: any) => QueryCommand;
    in: (val: any) => QueryCommand;
    nin: (val: any) => QueryCommand;
    and: (...args: IQueryCondition[]) => LogicCommand;
    nor: (...args: IQueryCondition[]) => LogicCommand;
    or: (...args: IQueryCondition[]) => LogicCommand;
    all(val: any[]): QueryCommand;
    mod(...rest: any[]): QueryCommand;
    elemMatch(val: any): QueryCommand;
    size(val: number): QueryCommand;
    set(val: any): UpdateCommand;
    remove(): UpdateCommand;
    inc(val: number): UpdateCommand;
    mul(val: number): UpdateCommand;
    max(val: any): UpdateCommand;
    min(val: any): UpdateCommand;
    rename(val: any): UpdateCommand;
    push(...args: any[]): UpdateCommand;
    pop(): UpdateCommand;
    shift(): UpdateCommand;
    unshift(...__values__: any[]): UpdateCommand;
    pull(val: any): UpdateCommand;
    pullAll(val: any): UpdateCommand;
    addToSet(val: any): UpdateCommand;
    exists(val: boolean): QueryCommand;
    expr(values: AggregationOperator): {
        $expr: AggregationOperator;
    };
    aggregate: {
        pipeline(): Aggregation;
        concat: (param: any) => AggregationOperator;
        addToSet: (param: any) => AggregationOperator;
        avg: (param: any) => AggregationOperator;
        first: (param: any) => AggregationOperator;
        last: (param: any) => AggregationOperator;
        max: (param: any) => AggregationOperator;
        min: (param: any) => AggregationOperator;
        push: (param: any) => AggregationOperator;
        sum: (param: any) => AggregationOperator;
        add: (param: any) => AggregationOperator;
        mergeObjects: (param: any) => AggregationOperator;
        arrayElemAt: (param: any) => AggregationOperator;
    };
};
export declare class AggregationOperator {
    constructor(name: any, param: any);
}
export default DbCommand;
