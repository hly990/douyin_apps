import { InternalSymbol } from '../symbols';
import { LogicCommand } from './logic-command';
export declare enum QUERY_COMMANDS__ENUMS {
    EQ_COMMAND = "eq",
    NEQ_COMMAND = "neq",
    GT_COMMAND = "gt",
    GTE_COMMAND = "gte",
    LT_COMMAND = "lt",
    LTE_COMMAND = "lte",
    IN_COMMAND = "in",
    NIN_COMMAND = "nin",
    ALL_COMMAND = "all",
    MOD_COMMAND = "mod",
    ELEM_MATCH_COMMAND = "elemMatch",
    SIZE_COMMAND = "size",
    EXISTS_COMMAND = "exists"
}
export declare class QueryCommand extends LogicCommand {
    operator: QUERY_COMMANDS__ENUMS;
    elemMatchVal: string;
    needRemoveKey: boolean;
    constructor(operator: QUERY_COMMANDS__ENUMS, operands: any, fieldName?: string | InternalSymbol, elemMatchVal?: string, needRemoveKey?: boolean);
    setNeedRemoveKey(needRemoveKey: boolean): void;
    toJSON(): {
        $ne: any;
    } | {
        [x: string]: any;
        $ne?: undefined;
    };
    _setName(name: string): QueryCommand;
    eq(right: any): LogicCommand;
    neq(right: any): LogicCommand;
    gt(right: any): LogicCommand;
    gte(right: any): LogicCommand;
    lt(right: any): LogicCommand;
    lte(arrs: any): LogicCommand;
    in(arrs: any[]): LogicCommand;
    nin(arrs: any[]): LogicCommand;
}
export declare function isComparisonCommand(object: any): object is QueryCommand;
export default QueryCommand;
